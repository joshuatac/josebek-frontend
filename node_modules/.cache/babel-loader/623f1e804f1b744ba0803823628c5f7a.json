{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\development\\\\Desktop\\\\josebek store\\\\frontend-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\development\\\\Desktop\\\\josebek store\\\\frontend-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\development\\\\Desktop\\\\josebek store\\\\frontend-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { cartConstants } from './constant';\nimport store from '../store';\n\nvar getCartItems = function getCartItems() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              try {\n                dispatch({\n                  type: cartConstants\n                });\n              } catch (error) {\n                console.log(error);\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexport var addToCart = function addToCart(product) {\n  var newQty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var cartItems, qty;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              cartItems = store.getState().cart.cartItems; // console.log('action::products', products);\n\n              qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty + newQty) : 1;\n              cartItems[product._id] = _objectSpread({}, product, {\n                qty: qty\n              });\n              localStorage.setItem('cart', JSON.stringify(cartItems));\n              dispatch({\n                type: cartConstants.ADD_TO_CART_REQUEST,\n                payload: {\n                  cartItems: cartItems\n                }\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var updateCart = function updateCart() {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var cartItems;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              cartItems = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : null;\n\n              if (cartItems) {\n                dispatch({\n                  type: cartConstants.ADD_TO_CART_REQUEST,\n                  payload: {\n                    cartItems: cartItems\n                  }\n                });\n              }\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/development/Desktop/josebek store/frontend-app/src/actions/cart.action.js"],"names":["cartConstants","store","getCartItems","dispatch","type","error","console","log","addToCart","product","newQty","cartItems","getState","cart","qty","_id","parseInt","localStorage","setItem","JSON","stringify","ADD_TO_CART_REQUEST","payload","updateCart","getItem","parse"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,YAA9B;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC1B;AAAA,wEAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AACN,kBAAI;AACHA,gBAAAA,QAAQ,CAAC;AACRC,kBAAAA,IAAI,EAAEJ;AADE,iBAAD,CAAR;AAIA,eALD,CAKE,OAAOK,KAAP,EAAc;AACfC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA;;AARK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAUA,CAXD;;AAiBA,OAAO,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAuB;AAAA,MAAbC,MAAa,uEAAN,CAAM;AAC/C;AAAA,yEAAO,kBAAOP,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACEQ,cAAAA,SADF,GACgBV,KAAK,CAACW,QAAN,GAAiBC,IADjC,CACEF,SADF,EAEN;;AAEMG,cAAAA,GAJA,GAIMH,SAAS,CAACF,OAAO,CAACM,GAAT,CAAT,GACTC,QAAQ,CAACL,SAAS,CAACF,OAAO,CAACM,GAAT,CAAT,CAAuBD,GAAvB,GAA4BJ,MAA7B,CADC,GAET,CANG;AAONC,cAAAA,SAAS,CAACF,OAAO,CAACM,GAAT,CAAT,qBACIN,OADJ;AAECK,gBAAAA,GAAG,EAAHA;AAFD;AAKAG,cAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeT,SAAf,CAA7B;AACAR,cAAAA,QAAQ,CAAC;AACRC,gBAAAA,IAAI,EAAEJ,aAAa,CAACqB,mBADZ;AAERC,gBAAAA,OAAO,EAAE;AAAEX,kBAAAA,SAAS,EAATA;AAAF;AAFD,eAAD,CAAR;;AAbM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAkBA,CAnBM;AAsBP,OAAO,IAAMY,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC/B;AAAA,yEAAO,kBAAOpB,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACAQ,cAAAA,SADA,GACYM,YAAY,CAACO,OAAb,CAAqB,MAArB,IACfL,IAAI,CAACM,KAAL,CAAWR,YAAY,CAACO,OAAb,CAAqB,MAArB,CAAX,CADe,GAEf,IAHG;;AAKN,kBAAIb,SAAJ,EAAe;AACdR,gBAAAA,QAAQ,CAAC;AACRC,kBAAAA,IAAI,EAAEJ,aAAa,CAACqB,mBADZ;AAERC,kBAAAA,OAAO,EAAE;AAAEX,oBAAAA,SAAS,EAATA;AAAF;AAFD,iBAAD,CAAR;AAIA;;AAVK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAYA,CAbM","sourcesContent":["import { cartConstants } from './constant';\r\nimport store from '../store';\r\n\r\nconst getCartItems = () => {\r\n\treturn async dispatch => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: cartConstants\r\n\t\t\t})\r\n\t\t\t\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const addToCart = (product, newQty=1) => {\r\n\treturn async (dispatch) => {\r\n\t\tconst { cartItems } = store.getState().cart;\r\n\t\t// console.log('action::products', products);\r\n\r\n\t\tconst qty = cartItems[product._id]\r\n\t\t\t? parseInt(cartItems[product._id].qty +newQty)\r\n\t\t\t: 1;\r\n\t\tcartItems[product._id] = {\r\n\t\t\t...product,\r\n\t\t\tqty,\r\n\t\t};\r\n\r\n\t\tlocalStorage.setItem('cart', JSON.stringify(cartItems));\r\n\t\tdispatch({\r\n\t\t\ttype: cartConstants.ADD_TO_CART_REQUEST,\r\n\t\t\tpayload: { cartItems },\r\n\t\t});\r\n\t};\r\n};\r\n\r\n\r\nexport const updateCart = () => {\r\n\treturn async (dispatch) => {\r\n\t\tconst cartItems = localStorage.getItem('cart')\r\n\t\t\t? JSON.parse(localStorage.getItem('cart'))\r\n\t\t\t: null;\r\n\r\n\t\tif (cartItems) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: cartConstants.ADD_TO_CART_REQUEST,\r\n\t\t\t\tpayload: { cartItems },\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n};"]},"metadata":{},"sourceType":"module"}