{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\development\\\\Desktop\\\\josebek store\\\\frontend-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\development\\\\Desktop\\\\josebek store\\\\frontend-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\development\\\\Desktop\\\\josebek store\\\\frontend-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { cartConstants, authConstants } from './constant';\nimport store from '../store';\nimport axios from 'axios';\n\nvar getCartItems = function getCartItems() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var res, cartItems;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              dispatch({\n                type: cartConstants.ADD_TO_CART_REQUEST\n              });\n              _context.next = 4;\n              return axios.post(\"/user/getCartItems\");\n\n            case 4:\n              res = _context.sent;\n\n              if (res.status === 200) {\n                cartItems = res.data.cartItems;\n                console.log({\n                  getCartItems: cartItems\n                });\n\n                if (cartItems) {\n                  dispatch({\n                    type: cartConstants.ADD_TO_CART_SUCCESS,\n                    payload: {\n                      cartItems: cartItems\n                    }\n                  });\n                }\n              }\n\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexport var addToCart = function addToCart(product) {\n  var newQty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var _store$getState, cartItems, auth, qty, payload, res;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _store$getState = store.getState(), cartItems = _store$getState.cart.cartItems, auth = _store$getState.auth; // console.log('action::products', products);\n\n              qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty + newQty) : 1;\n              cartItems[product._id] = _objectSpread({}, product, {\n                qty: qty\n              });\n\n              if (!auth.authenticate) {\n                _context2.next = 14;\n                break;\n              }\n\n              dispatch({\n                type: cartConstants.ADD_TO_CART_REQUEST\n              });\n              payload = {\n                // cartItems: Object.keys(cartItems).map((key, index) => {\n                // \treturn {\n                // \t\tquantity: cartItems[key].qty,\n                // \t\tproduct: cartItems[key]._id\n                // \t}\n                // })\n                cartItems: [{\n                  product: product._id,\n                  quantity: qty\n                }]\n              };\n              console.log(payload);\n              _context2.next = 9;\n              return axios.post(\"/user/cart/addtocart\", payload);\n\n            case 9:\n              res = _context2.sent;\n              console.log(res);\n\n              if (res.status === 201) {\n                dispatch(getCartItems());\n              }\n\n              _context2.next = 15;\n              break;\n\n            case 14:\n              localStorage.setItem('cart', JSON.stringify(cartItems));\n\n            case 15:\n              console.log('addToCart::', cartItems);\n              dispatch({\n                type: cartConstants.ADD_TO_CART_SUCCESS,\n                payload: {\n                  cartItems: cartItems\n                }\n              });\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var updateCart = function updateCart() {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var _store$getState2, auth, cartItems, payload;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _store$getState2 = store.getState(), auth = _store$getState2.auth;\n              cartItems = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : null;\n              console.log('updated uppppppppp');\n\n              if (auth.authenticate) {\n                localStorage.removeItem('cart');\n\n                if (cartItems) {\n                  payload = {\n                    cartItems: Object.keys(cartItems).map(function (key, index) {\n                      return {\n                        quantity: cartItems\n                      };\n                    })\n                  };\n                }\n              }\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/development/Desktop/josebek store/frontend-app/src/actions/cart.action.js"],"names":["cartConstants","authConstants","store","axios","getCartItems","dispatch","type","ADD_TO_CART_REQUEST","post","res","status","cartItems","data","console","log","ADD_TO_CART_SUCCESS","payload","addToCart","product","newQty","getState","cart","auth","qty","_id","parseInt","authenticate","quantity","localStorage","setItem","JSON","stringify","updateCart","getItem","parse","removeItem","Object","keys","map","key","index"],"mappings":"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","sourcesContent":["import { cartConstants, authConstants } from './constant';\r\nimport store from '../store';\r\nimport axios from 'axios';\r\n\r\nconst getCartItems = () => {\r\n\treturn async (dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: cartConstants.ADD_TO_CART_REQUEST,\r\n\t\t\t});\r\n\t\t\tconst res = await axios.post(`/user/getCartItems`);\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tconst { cartItems } = res.data;\r\n\t\t\t\tconsole.log({ getCartItems: cartItems });\r\n\t\t\t\tif (cartItems) {\r\n\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\ttype: cartConstants.ADD_TO_CART_SUCCESS,\r\n\t\t\t\t\t\tpayload: { cartItems },\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const addToCart = (product, newQty = 1) => {\r\n\treturn async (dispatch) => {\r\n\t\tconst {\r\n\t\t\tcart: { cartItems },\r\n\t\t\tauth,\r\n\t\t} = store.getState();\r\n\r\n\t\t// console.log('action::products', products);\r\n\r\n\t\tconst qty = cartItems[product._id]\r\n\t\t\t? parseInt(cartItems[product._id].qty + newQty)\r\n\t\t\t: 1;\r\n\t\tcartItems[product._id] = {\r\n\t\t\t...product,\r\n\t\t\tqty,\r\n\t\t};\r\n\r\n\t\tif (auth.authenticate) {\r\n\t\t\tdispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\r\n\t\t\tconst payload = {\r\n\t\t\t\t// cartItems: Object.keys(cartItems).map((key, index) => {\r\n\t\t\t\t// \treturn {\r\n\t\t\t\t// \t\tquantity: cartItems[key].qty,\r\n\t\t\t\t// \t\tproduct: cartItems[key]._id\r\n\t\t\t\t// \t}\r\n\t\t\t\t// })\r\n\r\n\t\t\t\tcartItems: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tproduct: product._id,\r\n\t\t\t\t\t\tquantity: qty,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t};\r\n\t\t\tconsole.log(payload);\r\n\t\t\tconst res = await axios.post(`/user/cart/addtocart`, payload);\r\n\t\t\tconsole.log(res);\r\n\t\t\tif (res.status === 201) {\r\n\t\t\t\tdispatch(getCartItems());\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tlocalStorage.setItem('cart', JSON.stringify(cartItems));\r\n\t\t}\r\n\t\tconsole.log('addToCart::', cartItems);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: cartConstants.ADD_TO_CART_SUCCESS,\r\n\t\t\tpayload: { cartItems },\r\n\t\t});\r\n\t};\r\n};\r\n\r\nexport const updateCart = () => {\r\n\treturn async (dispatch) => {\r\n\t\tconst {auth} = store.getState();\r\n\t\tlet cartItems = localStorage.getItem('cart') ?\r\n\t\tJSON.parse(localStorage.getItem('cart'))\r\n\t\t\t: null;\r\nconsole.log('updated uppppppppp')\r\n\r\nif (auth.authenticate) {\r\n\tlocalStorage.removeItem('cart');\r\n\r\n\tif (cartItems) {\r\n\t\tconst payload = {\r\n\t\t\tcartItems: Object.keys(cartItems).map((key, index) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tquantity: cartItems\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\t\t\r\n\t};\r\n};\r\n"]},"metadata":{},"sourceType":"module"}