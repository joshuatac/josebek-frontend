{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\development\\\\Desktop\\\\josebek store\\\\frontend-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\development\\\\Desktop\\\\josebek store\\\\frontend-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\development\\\\Desktop\\\\josebek store\\\\frontend-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { cartConstants } from './constant';\nimport store from '../store';\nexport var addToCart = function addToCart(product) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var cartItems, qty;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              cartItems = store.getState().cart.cartItems; // console.log('action::products', products);\n\n              qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty + 1) : 1;\n              cartItems[product._id] = _objectSpread({}, product, {\n                qty: qty\n              });\n              localStorage.setItem('cart', JSON.stringify(cartItems));\n              dispatch({\n                type: cartConstants.ADD_TO_CART_REQUEST,\n                payload: {\n                  cartItems: cartItems\n                }\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var updateCart = function updateCart() {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var cart;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              cart = localStorage;\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/development/Desktop/josebek store/frontend-app/src/actions/cart.action.js"],"names":["cartConstants","store","addToCart","product","dispatch","cartItems","getState","cart","qty","_id","parseInt","localStorage","setItem","JSON","stringify","type","ADD_TO_CART_REQUEST","payload","updateCart"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,YAA9B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAa;AACrC;AAAA,wEAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACEC,cAAAA,SADF,GACgBJ,KAAK,CAACK,QAAN,GAAiBC,IADjC,CACEF,SADF,EAEN;;AAEMG,cAAAA,GAJA,GAIMH,SAAS,CAACF,OAAO,CAACM,GAAT,CAAT,GACTC,QAAQ,CAACL,SAAS,CAACF,OAAO,CAACM,GAAT,CAAT,CAAuBD,GAAvB,GAA6B,CAA9B,CADC,GAET,CANG;AAONH,cAAAA,SAAS,CAACF,OAAO,CAACM,GAAT,CAAT,qBACIN,OADJ;AAECK,gBAAAA,GAAG,EAAHA;AAFD;AAKAG,cAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeT,SAAf,CAA7B;AACAD,cAAAA,QAAQ,CAAC;AACRW,gBAAAA,IAAI,EAAEf,aAAa,CAACgB,mBADZ;AAERC,gBAAAA,OAAO,EAAE;AAAEZ,kBAAAA,SAAS,EAATA;AAAF;AAFD,eAAD,CAAR;;AAbM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAkBA,CAnBM;AAsBP,OAAO,IAAMa,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC5B;AAAA,yEAAO,kBAAMd,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACGG,cAAAA,IADH,GACUI,YADV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAGH,CAJM","sourcesContent":["import { cartConstants } from './constant';\r\nimport store from '../store';\r\n\r\nexport const addToCart = (product) => {\r\n\treturn async (dispatch) => {\r\n\t\tconst { cartItems } = store.getState().cart;\r\n\t\t// console.log('action::products', products);\r\n\r\n\t\tconst qty = cartItems[product._id]\r\n\t\t\t? parseInt(cartItems[product._id].qty + 1)\r\n\t\t\t: 1;\r\n\t\tcartItems[product._id] = {\r\n\t\t\t...product,\r\n\t\t\tqty,\r\n\t\t};\r\n\r\n\t\tlocalStorage.setItem('cart', JSON.stringify(cartItems));\r\n\t\tdispatch({\r\n\t\t\ttype: cartConstants.ADD_TO_CART_REQUEST,\r\n\t\t\tpayload: { cartItems },\r\n\t\t});\r\n\t};\r\n};\r\n\r\n\r\nexport const updateCart = () => {\r\n    return async dispatch => {\r\n        const cart = localStorage\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}